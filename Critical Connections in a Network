class Solution{private:
int timer=1;
void dfs(int node,int parent,vector<int>&v,vector<int>adj[],int tin[],int low[],vector<vector<int>>& bridges){
    v[node]=1;tin[node]=low[node]=timer;
    timer++;
    for(auto i:adj[node]){
       if(i==parent)continue;
       if(v[i]==0){
           dfs(i,node,v,adj,tin,low,bridges);
           low[node]=min(low[i],low[node]);
           if(low[i]>tin[node])bridges.push_back({i,node});
       }
       else 
                low[node] = min(low[node], low[i]);
    }
}
public:
vector<vector<int>> criticalConnections(int n,vector<vector<int>>& connections){
    vector<int>adj[n];
    for(auto i:connections){
        int u=i[0],v=i[1];
        adj[u].push_back(v);
        adj[v].push_back(u);

    }
    vector<int>v(n);
    int tin[n];
    int low[n];
    vector<vector<int>>bridges;
    dfs(0,-1,v,adj,tin,low,bridges);
    return bridges;
}
 };
