Lclass Solution {
public:
    string longestPalindrome(string s) {
       bool dp[1001][1001]={0};int maxi=1;
        int i=0;int cnt=0;
        int n=s.size();string ans="";
        if(s.length()==1)return s;
        if(s.length()==2){
            if(s[0]==s[1])return s;
            else { string temp={s.begin(),s.begin()+1};return temp;}
        }string x={s.begin(),s.begin()+1};
        while(i<n){
            dp[i][i]=1;i++;cnt++;ans={s.begin()+i,s.begin()+i+1};maxi=1;
        }
        i=0;bool flag=true;
        while(i<n-1){
            if(s[i]==s[i+1]){
                dp[i][i+1]=1;cnt++;ans={s.begin()+i,s.begin()+i+2};maxi=2;flag=false;
            }i++;
        }
        int l=2;
        while(l<n){
             i=0;int prev_maxi=0;
            while(i<n-l){
                int j=i+l;
                if((s[i]==s[j]) && (dp[i+1][j-1]==1)){dp[i][j]=1;cnt++;maxi=l;
                prev_maxi=max(prev_maxi,maxi);
                if(maxi==prev_maxi)
                 ans={s.begin()+i,s.begin()+j+1};flag=false;
                }
                i++;
            }l++;
        }
        if(flag==true)return x;
        return ans;
    }
};
